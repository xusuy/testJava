package com.basic;

import org.junit.Test;

/**
 * @author xsy
 * @create 2019-12-26 14:56
 * @desc 数据类型之间转换
 **/
public class DataTypeConvert {
    private static final String BIN_SEPARATOR = " ";

    /**
     * 二进制字符串转换为普通字符串
     *
     * @param binaryStr 二进制字符串
     * @return String 普通字符串
     * @Auth zongf
     * @Date 2019-05-07
     */
    public static String toString(String binaryStr) {

        if (binaryStr == null) return null;

        String[] binArrays = binaryStr.split(BIN_SEPARATOR);


        StringBuffer sb = new StringBuffer();
        for (String binStr : binArrays) {
            char c = binstrToChar(binStr);
            sb.append(c);
        }
        return sb.toString();
    }

    /**
     * 将二进制转换成字符
     *
     * @param binStr 二进制字符串
     * @return char
     * @Auth zongf
     * @Date 2019-05-07
     */
    private static char binstrToChar(String binStr) {
        int[] temp = binstrToIntArray(binStr);
        int sum = 0;
        for (int i = 0; i < temp.length; i++) {
            sum += temp[temp.length - 1 - i] << i;
        }
        return (char) sum;
    }

    /**
     * 二进制字符转换为int数组
     *
     * @param binStr 二进制字符串
     * @return int[]
     * @Auth zongf
     * @Date 2019-05-07
     */
    private static int[] binstrToIntArray(String binStr) {
        char[] temp = binStr.toCharArray();
        int[] result = new int[temp.length];
        for (int i = 0; i < temp.length; i++) {
            result[i] = temp[i] - 48;
        }
        return result;
    }

    //16进制字符串转换为普通字符串
    @Test
    public void testHexStrConvertString() throws Exception {
        String byteString
//        byte[] bytes = Hex.decodeHex(byteString);
//        String str = new String(bytes, "utf-8");
//        System.out.println(str);
        System.out.println(hexStringToString(byteString));
    }

    /**
     * 16进制字符串转换为字符串
     *
     * @param hexString 16进制的字符串表示
     * @return
     */
    public static String hexStringToString(String hexString) {
        if (hexString == null || hexString.equals("")) {
            return null;
        }
        hexString = hexString.replace(" ", "");
        byte[] baKeyword = new byte[hexString.length() / 2];
        for (int i = 0; i < baKeyword.length; i++) {
            try {
                baKeyword[i] = (byte) (0xff & Integer.parseInt(
                        hexString.substring(i * 2, i * 2 + 2), 16));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        try {
            hexString = new String(baKeyword, "utf-8");
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        return hexString;
    }
}
